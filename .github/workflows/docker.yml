name: Build and Release Docker Image

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version tag for the release (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"
      release_name:
        description: "Name of the release (e.g., 'Initial Release')"
        required: false
        default: "Docker Image Release"
      prerelease:
        description: "Mark as prerelease (true/false)"
        required: false
        default: "true"

permissions:
  contents: write  # Ensures sufficient permissions for release creation

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Build the Docker image
    - name: Build Docker Image
      run: docker build -t my-image:latest .

    # Step 3: Save the Docker image as a tarball
    - name: Save Docker Image
      run: docker save my-image:latest -o my-image.tar

    - name: Check Repository Access
      run: |
        curl -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }}

    # Step 5: Create a new release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_version }}
        release_name: ${{ github.event.inputs.release_name }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    # Step 6: Upload the Docker image to the release
    - name: Upload Docker Image to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-image.tar
        asset_name: my-image.tar
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}